@using Sudoku;
@inject IJSRuntime JSRuntime;

<div @ref="div" id="@ID" class="@CellClass" tabindex="@(TabIndex)" @onkeypress="OnKeyPress" @onkeydown="OnKeyDown">
    @DisplayString
</div>

@code {
    private Puzzle.Cell cell;
    [Parameter] public Puzzle.Cell Cell
        {
        get { return this.cell; }
        set
            {
            this.cell = value;
            if (this.cell != null)
                {
                this.cell.View = this;
                }
            }
        }
    [Parameter] public string ColorClass { get; set; }
    [CascadingParameter] public SudokuBoard SudokuBoard { get; set; }

    private ElementReference div;

    private string CellClass
        {
        get
            {
            return String.Format("sudoku-cell-border-{0}-{1}-{2} {3} {4} sudoku-cell sudoku-cell-block-{5}",
                SudokuBoard.Puzzle.BlockSize,
                Cell.Row % SudokuBoard.Puzzle.BlockSize,
                Cell.Column % SudokuBoard.Puzzle.BlockSize,
                (Cell.ConflictingCells?.Count > 0) ? "sudoku-cell-conflict" : "",
                Cell.ReadOnly ? "sudoku-cell-readonly" : "",
                SudokuBoard.Puzzle.BlockSize
                );
            }
        }

    private MarkupString DisplayString
        {
        get
            {
            if (Cell.Value == 0)
                return (MarkupString) "&nbsp;";

            // For 3x3 board: the digits are 1-9.
            // For 4x4 board: the digits are 0-F (i.e. hex).
            int offset = (SudokuBoard.Puzzle.BlockSize == 3) ? 0 : 1;
            int value = Cell.Value - offset;

            char ch = (char)((value < 10) ? ('0' + value) : ('A' + value - 10));

            return (MarkupString) $"{ch}";
            }
        }

    private int TabIndex
        {
        get
            {
            if (Cell.ReadOnly)
                return -1;

            return 100 + Cell.Row * SudokuBoard.Puzzle.Columns + Cell.Column;
            }
        }

    private void OnKeyDown(KeyboardEventArgs args)
        {
        switch (args.Code)
            {
            case "ArrowUp":
                SudokuBoard.NavigateUp(this);
                break;

            case "ArrowDown":
                SudokuBoard.NavigateDown(this);
                break;

            case "ArrowLeft":
                SudokuBoard.NavigateLeft(this);
                break;

            case "ArrowRight":
                SudokuBoard.NavigateRight(this);
                break;

            case "Space":
            case "Delete":
            case "Backspace":
                UpdateValue(0);
                break;
            }
        }

    private void OnKeyPress(KeyboardEventArgs args)
        {
        byte offset = (byte)((SudokuBoard.Puzzle.BlockSize == 3) ? 0 : 1);

        switch (args.Key)
            {
            case "0":
                UpdateValue(0 + offset);
                break;
            case "1":
                UpdateValue(1 + offset);
                break;
            case "2":
                UpdateValue(2 + offset);
                break;
            case "3":
                UpdateValue(3 + offset);
                break;
            case "4":
                UpdateValue(4 + offset);
                break;
            case "5":
                UpdateValue(5 + offset);
                break;
            case "6":
                UpdateValue(6 + offset);
                break;
            case "7":
                UpdateValue(7 + offset);
                break;
            case "8":
                UpdateValue(8 + offset);
                break;
            case "9":
                UpdateValue(9 + offset);
                break;
            case "A":
            case "a":
                UpdateValue(10 + offset);
                break;
            case "B":
            case "b":
                UpdateValue(11 + offset);
                break;
            case "C":
            case "c":
                UpdateValue(12 + offset);
                break;
            case "D":
            case "d":
                UpdateValue(13 + offset);
                break;
            case "E":
            case "e":
                UpdateValue(14 + offset);
                break;
            case "F":
            case "f":
                UpdateValue(15 + offset);
                break;
            }
        }

    private void UpdateValue(int newValue)
        {
        bool readOnly = (Cell.ReadOnly && !SudokuBoard.EditMode);

        if (!readOnly && Cell.Value != newValue)
            {
            List<SudokuCell> sudokuCellsToUpdate = new List<SudokuCell>();

            if (Cell.ConflictingCells != null)
                {
                foreach (Puzzle.Cell conflictingCell in Cell.ConflictingCells)
                    {
                    SudokuCell sudokuCell = conflictingCell.View as SudokuCell;
                    if (sudokuCell != null)
                        {
                        sudokuCellsToUpdate.Add(sudokuCell);
                        }
                    }
                }

            Cell.Value = (byte) newValue;
            if (SudokuBoard.EditMode)
                {
                Cell.ReadOnly = (newValue != 0);
                }

            if (Cell.ConflictingCells != null)
                {
                foreach (Puzzle.Cell conflictingCell in Cell.ConflictingCells)
                    {
                    SudokuCell sudokuCell = conflictingCell.View as SudokuCell;
                    if (sudokuCell != null)
                        {
                        sudokuCellsToUpdate.Add(sudokuCell);
                        }
                    }
                }
            foreach (SudokuCell sudokuCell in sudokuCellsToUpdate)
                {
                sudokuCell.StateHasChanged();
                }

            this.StateHasChanged();
            }
        }

    private string ID { get { return $"cell-{Cell.Row}-{Cell.Column}"; } }
    public void Focus()
        {
        // Dang! No easy way to set the focus.
        // There's JavaScript code in index.html that can be called to set the focus to an element by id.
        JSRuntime.InvokeAsync<int>("setFocus", (object) ID);
        }
    }
