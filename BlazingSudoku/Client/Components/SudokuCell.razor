@using SparksInTheSoftware.Sudoku;
@inject IJSRuntime JSRuntime;

<div @ref="rootElement" class="@CellClass" tabindex="@(TabIndex)" @onkeypress="OnKeyPress" @onkeydown="OnKeyDown">
    @DisplayString
</div>

@code {
    private Puzzle.Cell cell;
    [Parameter]
    public Puzzle.Cell Cell
        {
        get { return this.cell; }
        set
            {
            this.cell = value;
            if (this.cell != null)
                {
                this.cell.View = this;
                }
            }
        }
    [Parameter] public string ColorClass { get; set; }
    [CascadingParameter] public SudokuBoard SudokuBoard { get; set; }

    private ElementReference rootElement;

    private string BorderClass
        {
        get
            {
            int rowInBlock = (Cell.Row % SudokuBoard.Puzzle.BlockSize);
            int columnInBlock = (Cell.Column % SudokuBoard.Puzzle.BlockSize);
            string borderClass = "";


            if (rowInBlock == 0)
                {
                borderClass = "sudoku-cell-border-top";
                }
            else if (rowInBlock == (SudokuBoard.Puzzle.BlockSize - 1))
                {
                borderClass = "sudoku-cell-border-bottom";
                }

            if (columnInBlock == 0)
                {
                borderClass += " sudoku-cell-border-left";
                }
            else if (columnInBlock == (SudokuBoard.Puzzle.BlockSize - 1))
                {
                borderClass += " sudoku-cell-border-right";
                }

            return borderClass;
            }
        }

    private string CellClass
        {
        get
            {
            string conflict = (Cell.ConflictingCells?.Count > 0) ? "sudoku-cell-conflict" : "";
            string readOnly = Cell.ReadOnly ? "sudoku-cell-readonly" : "";

            return $"{BorderClass} {conflict} {readOnly} sudoku-cell sudoku-cell-block-{SudokuBoard.Puzzle.BlockSize}";
            }
        }

    private MarkupString DisplayString
        {
        get
            {
            if (Cell.Value == Puzzle.EmptyCellValue)
                return (MarkupString)"&nbsp;";

            int value = Cell.Value;

            char ch = (char)((value < 10) ? ('0' + value) : ('A' + value - 10));

            return (MarkupString)$"{ch}";
            }
        }

    private int TabIndex
        {
        get
            {
            if (Cell.ReadOnly)
                return -1;

            return 100 + Cell.Row * SudokuBoard.Puzzle.Columns + Cell.Column;
            }
        }

    private void OnKeyDown(KeyboardEventArgs args)
        {
        switch (args.Code)
            {
            case "ArrowUp":
                SudokuBoard.NavigateUp(this);
                break;

            case "ArrowDown":
                SudokuBoard.NavigateDown(this);
                break;

            case "ArrowLeft":
                SudokuBoard.NavigateLeft(this);
                break;

            case "ArrowRight":
                SudokuBoard.NavigateRight(this);
                break;

            case "Space":
            case "Delete":
            case "Backspace":
                UpdateValue(Puzzle.EmptyCellValue);
                break;
            }
        }

    private void OnKeyPress(KeyboardEventArgs args)
        {
        char ch = args.Key[0];

        // 3 x 3 - digits 1 to 9
        // 4 x 4 - digits 0 to 9 and letters A to F
        // 5 x 5 - letters A to Y
        // 6 x 6 - digits 0 to 9 and letters A to Z

        if ((ch >= '0') && (ch <= '9'))
            {
            UpdateValue(ch - '0');
            }
        else if ((ch >= 'A') && (ch <= 'Z'))
            {
            UpdateValue((ch - 'A') + 10);
            }
        else if ((ch >= 'a') && (ch <= 'z'))
            {
            UpdateValue((ch - 'a') + 10);
            }
        }

    private void UpdateValue(int newValue)
        {
        bool readOnly = (Cell.ReadOnly && !SudokuBoard.EditMode);

        if (!readOnly && (Cell.Value != newValue)
            && ((newValue == Puzzle.EmptyCellValue) || SudokuBoard.Puzzle.ValueInRange((byte)newValue)))
            {
            List<SudokuCell> sudokuCellsToUpdate = new List<SudokuCell>();

            if (Cell.ConflictingCells != null)
                {
                foreach (Puzzle.Cell conflictingCell in Cell.ConflictingCells)
                    {
                    SudokuCell sudokuCell = conflictingCell.View as SudokuCell;
                    if (sudokuCell != null)
                        {
                        sudokuCellsToUpdate.Add(sudokuCell);
                        }
                    }
                }

            Cell.Value = (byte)newValue;
            if (SudokuBoard.EditMode)
                {
                Cell.ReadOnly = (newValue != Puzzle.EmptyCellValue);
                }

            if (Cell.ConflictingCells != null)
                {
                foreach (Puzzle.Cell conflictingCell in Cell.ConflictingCells)
                    {
                    SudokuCell sudokuCell = conflictingCell.View as SudokuCell;
                    if (sudokuCell != null)
                        {
                        sudokuCellsToUpdate.Add(sudokuCell);
                        }
                    }
                }
            foreach (SudokuCell sudokuCell in sudokuCellsToUpdate)
                {
                sudokuCell.StateHasChanged();
                }

            this.StateHasChanged();
            }
        }

    public void Focus()
        {
        // Dang! No easy way to set the focus.
        // There's JavaScript code in index.html that can be called to set the focus to an element by id.
        JSRuntime.InvokeAsync<int>("setFocus", (object)rootElement);
        }
}
