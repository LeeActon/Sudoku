using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace SparksInTheSoftware.Sudoku
    {
    public class Puzzle
        {
        public int BlockSize { get; set; }  = 4;
        public int Rows { get { return BlockSize * BlockSize; } }
        public int Columns { get { return BlockSize * BlockSize; } }

        // We keep an array of Cell objects as well as an array of just the cell values.
        // When solving puzzles, we create multiple copies of the Puzzle, and all we need is the cellValues.
        // The Cell objects are created on demand, and provide additional functionality needed for UI.
        private byte[,] cellValues;
        public Cell[,] cells;
        public Cell[,] Cells
            {
            get
                {
                if (this.cells == null)
                    {
                    this.cells = new Cell[Rows, Columns];
                    for (int row = 0; row < Rows; row++)
                        {
                        for (int column = 0; column < Columns; column++)
                            {
                            Cell newCell = new Cell(this, row, column);
                            this.cells[row, column] = newCell;

                            // Any cell with a value is part of the puzzle, so is ReadOnly.
                            if (newCell.Value != 0)
                                newCell.ReadOnly = true;
                            }
                        }
                    }

                return this.cells;
                }
            }

        public static Puzzle GeneratePuzzle()
            {
            Puzzle puzzle = LoadPuzzle(0, "Intermediate");

            return puzzle;
            }

        public static Puzzle LoadPuzzle(int iPuzzle, string difficulty)
            {
            string[] puzzles = IntermediatePuzzles;

            switch (difficulty)
                {
                case "Simple":
                    puzzles = SimplePuzzles;
                    break;
                case "Easy":
                    puzzles = EasyPuzzles;
                    break;
                case "Intermediate":
                    puzzles = IntermediatePuzzles;
                    break;
                case "Expert":
                    puzzles = ExpertPuzzles;
                    break;
                }

            if (iPuzzle < 0 || iPuzzle >= puzzles.Length)
                return null;

            return LoadPuzzle(puzzles[iPuzzle]);
            }

        public static Puzzle LoadPuzzle(string puzzleString)
            {
            Puzzle puzzle = new Puzzle();
            int iChar = 0;

            for (int row = 0; row < puzzle.Rows; row++)
                {
                for (int column = 0; column < puzzle.Columns; column++)
                    {
                    byte value = 0;
                    char ch = puzzleString[iChar++];

                    if (ch >= '1' && ch <= '9')
                        value = (byte)(ch - '1');
                    puzzle.SetValue(row, column, value);
                    }
                }

            return puzzle;
            }

        public int EmptyCells { get; set; }

        private List<Puzzle> solutions;
        public List<Puzzle> Solutions
            {
            get
                {
                if (this.solutions == null)
                    this.solutions = new List<Puzzle>();

                return this.solutions;
                }
            }

        public Puzzle(int blockSize = 3)
            {
            this.cellValues = new byte[Rows, Columns];
            this.solutions = null;
            this.BlockSize = blockSize;
            }

        public Puzzle(Puzzle puzzle) : this(puzzle.cellValues, puzzle.EmptyCells) { }

        public Puzzle(byte[,] newData, int emptyCells)
            {
            this.cellValues = newData.Clone() as byte[,];
            this.EmptyCells = emptyCells;
            }

        public Puzzle(byte[,] newData)
            {
            this.cellValues = newData.Clone() as byte[,];
            this.EmptyCells = 0;
            for (int row = 0; row < Rows; row++)
                {
                for (int column = 0; column < Columns; column++)
                    {
                    if (this.cellValues[row, column] == 0)
                        {
                        this.EmptyCells++;
                        }
                    }
                }
            }

        public void Clear(bool all = false)
            {
            this.EmptyCells = Rows * Columns;
            for (int row = 0; row < Rows; row++)
                {
                for (int column = 0; column < Columns; column++)
                    {
                    if (all || !Cells[row, column].ReadOnly)
                        {
                        Cells[row, column].Value = 0;
                        }
                    }
                }
            }

        private void SetValue(int row, int column, byte value)
            {
            byte oldValue = this.cellValues[row, column];

            this.cellValues[row, column] = value;

            if (oldValue != value)
                {
                if (value == 0)
                    {
                    EmptyCells++;
                    }
                else if (oldValue == 0)
                    {
                    EmptyCells--;
                    }
                }
            }

        private byte GetValue(int row, int column)
            {
            return this.cellValues[row, column];
            }

        public bool IsValueInRow(int row, byte value)
            {
            for (int column = 0; column < Columns; column++)
                {
                if (this.cellValues[row, column] == value)
                    return true;
                }

            return false;
            }
        public bool IsValueInColumn(int column, byte value)
            {
            for (int row = 0; row < Rows; row++)
                {
                if (this.cellValues[row, column] == value)
                    return true;
                }

            return false;
            }

        public bool IsValueInBlock(int testRow, int testColumn, byte value)
            {
            int rowBlock = testRow / BlockSize;
            int rowStart = rowBlock * BlockSize;
            int rowEnd = rowStart + BlockSize;
            int columnBlock = testColumn / BlockSize;
            int columnStart = columnBlock * BlockSize;
            int columnEnd = columnStart + BlockSize;

            for (int row = rowStart; row < rowEnd; row++)
                {
                for (int column = columnStart; column < columnEnd; column++)
                    {
                    if (this.cellValues[row, column] == value)
                        return true;
                    }
                }

            return false;
            }

        public bool IsValueInUse(int row, int column, byte value)
            {
            return IsValueInRow(row, value) || IsValueInColumn(column, value) || IsValueInBlock(row, column, value);
            }

        public class SolutionProgressReport
            {
            public int Row { get; set; }
            public int Column { get; set; }
            public byte Value { get; set; }

            public int PercentComplete { get; set; }
            };

        public int Solve(int maxSolutions)
            {
            Task<int> task = Solve(maxSolutions, null);

            task.Wait();

            return task.Result;
            }

        public async Task<int> Solve(int maxSolutions, IProgress<SolutionProgressReport> progress, bool clear = false)
            {
            if (clear)
                {
                this.solutions = null;
                }
            if (Solutions.Count >= maxSolutions)
                return Solutions.Count;

            SolutionProgressReport progessReport = new SolutionProgressReport();

            for (int row = 0; row < Rows; row++)
                {
                progessReport.Row = row;
                for (int column = 0; column < Columns; column++)
                    {
                    progessReport.Column = column;
                    if (this.cellValues[row, column] == 0)
                        {
                        for (byte value = 1; value <= 9; value++)
                            {
                            if (!IsValueInUse(row, column, value))
                                {
                                progessReport.Value = value;
                                SetValue(row, column, value);
                                progress?.Report(progessReport);
                                await Solve(maxSolutions, progress);
                                SetValue(row, column, 0);
                                }
                            }

                        return Solutions.Count;
                        }
                    }
                }

            Solutions.Add(new Puzzle(this.cellValues, this.EmptyCells));

            return Solutions.Count;
            }

        #region Cell class and support function - Keeps track of conflicting values (useful in UI)
        public class Cell
            {
            public Puzzle Puzzle { get; private set; }
            public int Row { get; private set; }
            public int Column { get; private set; }

            public object View { get; set; }

            public Cell(Puzzle puzzle, int row, int column)
                {
                this.Puzzle = puzzle;
                this.Row = row;
                this.Column = column;
                }

            public byte Value
                {
                get { return Puzzle.GetValue(Row, Column); }
                set
                    {
                    if (Puzzle.GetValue(Row, Column) != value)
                        {
                        if (ConflictingCells != null)
                            {
                            // This cell no longer conflicts with the same cells.
                            // Remove this cell from the other cells' lists of conflicts.
                            foreach (Cell conflictingCell in ConflictingCells)
                                {
                                conflictingCell.RemoveConflictingCell(this);
                                }
                            this.conflictingCells = null;
                            }

                        Puzzle.SetValue(Row, Column, value);

                        // Find new conflicts.
                        if (value != 0)
                            {
                            Puzzle.UpdateConflicts(this);
                            }
                        }
                    }
                }

            public bool ReadOnly { get; set; }

            private List<Cell> conflictingCells = null;
            public List<Cell> ConflictingCells
                {
                get
                    {
                    return this.conflictingCells;
                    }
                }

            public void AddConflictinngCell(Cell conflictingCell)
                {
                if (this.conflictingCells == null)
                    this.conflictingCells = new List<Cell>();

                if (!this.conflictingCells.Contains(conflictingCell))
                    {
                    this.conflictingCells.Add(conflictingCell);
                    }
                }

            public void RemoveConflictingCell(Cell conflictingCell)
                {
                if (this.conflictingCells != null)
                    this.conflictingCells.Remove(conflictingCell);
                }
            }

        public void UpdateConflicts(Cell cell)
            {
            UpdateRowConflicts(cell);
            UpdateColumnConflicts(cell);
            UpdateBlockConflicts(cell);
            }

        private void UpdateRowConflicts(Cell cell)
            {
            int targetRow = cell.Row;
            int targetColumn = cell.Column;
            byte targetValue = cell.Value;

            int row = cell.Row;

            for (int column = 0; column < Columns; column++)
                {
                if (!((row == targetRow) && (column == targetColumn)))
                    {
                    if (this.cellValues[row, column] == targetValue)
                        {
                        Cell matchingCell = this.Cells[row, column];

                        matchingCell.AddConflictinngCell(cell);
                        cell.AddConflictinngCell(matchingCell);
                        }
                    }
                }
            }

        private void UpdateColumnConflicts(Cell cell)
            {
            int targetRow = cell.Row;
            int targetColumn = cell.Column;
            byte targetValue = cell.Value;
            int column = cell.Column;

            for (int row = 0; row < Rows; row++)
                {
                if (!((row == targetRow) && (column == targetColumn)))
                    {
                    if (this.cellValues[row, column] == targetValue)
                        {
                        Cell matchingCell = this.Cells[row, column];

                        matchingCell.AddConflictinngCell(cell);
                        cell.AddConflictinngCell(matchingCell);
                        }
                    }
                }
            }

        private void UpdateBlockConflicts(Cell cell)
            {
            int targetRow = cell.Row;
            int targetColumn = cell.Column;
            byte targetValue = cell.Value;

            int rowBlock = targetRow / BlockSize;
            int rowStart = rowBlock * BlockSize;
            int rowEnd = rowStart + BlockSize;
            int columnBlock = targetColumn / BlockSize;
            int columnStart = columnBlock * BlockSize;
            int columnEnd = columnStart + BlockSize;

            for (int row = rowStart; row < rowEnd; row++)
                {
                for (int column = columnStart; column < columnEnd; column++)
                    {
                    if (!((row == targetRow) && (column == targetColumn)))
                        if (this.cellValues[row, column] == targetValue)
                            {
                            Cell matchingCell = Cells[row, column];

                            matchingCell.AddConflictinngCell(cell);
                            cell.AddConflictinngCell(matchingCell);
                            }
                    }
                }
            }
        #endregion
        #region - Puzzle data
        static string[] SimplePuzzles =
            {
            "9.842.5.............69.7..4..5.....824..1..733.....9..6..8.41.............1.527.9",
            ".5...9.3.2.9.1...6..4.5.71.9...2.....215.497.....7...8.35.8.2..6...3.5.7.1.2...6.",
            ".........8..4.7..3.15...74.2.......9....9....9.38.15.763.....28..1...4...2.7.6.5.",
            ".2..1..7.5...9...1..3...9......5....4...7...68..6.2..535.8.4.97..2...8...84...21.",
            "..5.2.9......3....4.7...1.5..........527.139..83.9.75..2.3.6.4.5..9.8..23.9...8.7",
            "..8.52.7.4...1.8...6...3..22.5......81..9..24......1.37..6...1...4.3...9.2.78.3..",
            "...4..31.3.1.82..7..71.......9..4.38.........68.7..1.......98..9..52.7.4.76..3...",
            "...8.57....9.7.1..73..2..6.9...3...2.276.159.5...4...1.5..1..49..4.5.3....84.3...",
            "59.62..437.8.....1....9..5.....5...43.49.26.81...6.....7..3....4.....7.281..75.36",
            "4.31...9625.7...1...19..7.4...3.9685.........5162.8...1.2..34...8...7.6164...13.9",
            "9.2...7.1.6.....2...51.98...8.512.9..1.....3...6...4......3.......6.7...7.3.8.9.6",
            ".5.....2..6..3..9....1.9...8..7.4..3.3.....1..27...86..73...18..........5..6.3..4",
            "...3...5.5.3.867...162..83..6.1.59.8.9.....1.3.17.8.2..78..234...984.2.5.4...3...",
            ".14..2..8....7.529.5.....7.6..8.9.4.4.....1..5..4.6.3..6.....5.....6.812.37..8..4",
            ".65.2..3.2...3...5..8..46.1..31.2...14.....69...4.52..9.63..1..3...1...7.1..8.34.",
            "..6..5.8.143...95..5.3...646..7548.....9.2.....5631..953...8.4..87...135.6.5..7..",
            ".....829.1..9...469.8......8.95......1...43..4.76.....5.1......2..1...83.....672.",
            ".7.4.12...9...538625...6...421.....3.........7.....465...6...246421...3...92.8.1.",
            "..91......54.8..9...1.9.536...2.6..9.76.3.81.1..9.8...618.4.7...3..6.94......73..",
            ".34....5....5..162.1.........274..9...3.657....538..4..8..........4..618.51....2.",
            "7...6.395.....14....285....3.4.2...952.....8.9.8.1...6..319.........29..2...3.851",
            "..9.8.7.....7.6...7...53..1.13.7..6.2.68.45.3.5..6.42.3..51...8...6.9.....1.3.2..",
            "......4..8......31.3..7.58..2.19...4..7...9..4...83.2..59.2..7.31......9..2......",
            "3...7...1.12....4....1.6.2...17692..6..4.8..5..72519...6.8.3....7....59.9...2...3",
            ".8..6.9....3...6.1..4.18.....5.2.8..23.....5...6.7.4....9.32.....8...3.9.1..5.2..",
            "......1.48..2..63.13..8..5..7.1..4..95.....21.4.7..3..42..6..7.7..9..54.......2.9",
            ".568........792..1.....5..3.89....36.7..2..4.61....79.9..5.....5..487........936.",
            "..38.42........1..57.91...83..2.76.4..6...8..4.76.1..97...52.86..5........84.67..",
            "..91437...3..8..2.6....5..38.63.4..259.....313..6.15.84..5....9.6..3..5...57123..",
            "...5....14..8...9..76....3.2.1.7...66....9...9.4.3...8.25....8.3..9...2....3....4",
            "165....794....9..5...57...3.8..6.5....49537....3.4..6.5...91...8..4....634....897",
            "..9..846.2.8...7..56...4.399.67.3...............5.69.837.8...91..4...5.3.953..2..",
            "..4......365....78.71..69..8..6.231.....5.....163.8..9..38..49.15....783......5..",
            ".4..1..7..159.832..9.....8..5.....6...81.42.....5.9..............6...8..17.6.5.43",
            ".416..85.3....1.94......2.....7.6...1..592..7...4.8.....5......71.2....9.36..742.",
            "7.59..2.6..28.....8...3..57....8..64..67.15..42..6....91..7...8.....83..5.8..36.9",
            "3...1..9828.5..34..49...2......5..7.4..9.7..5.2..8......4...53..92..3.8667..9...4",
            "61.....57.8.....1..751.329...95681...5..9..2..37...96....812.....8...7......7....",
            "...5.......32.67...57.8493..76....18..4...2..92....36..1542.69...23.71.......9...",
            ".895.62.....84.9.513......83......47.9..8..2.25......19......548.2.65.....14.978.",
            "7....352...2........8..6.3....384.67..9..7......295.13..5..2.8...6......1....845.",
            "..86...2.16.2.539..3......5.8..9..43...8.4...49..6..7.3......1..491.6.57.1...98..",
            "..6..4.8.2...1.6...41..67.93.47.1....1.....7....8.93.47.85..43...2.8...7.9.6..2..",
            ".84.59.1.251..7.69....2..5459.......1.7...9.6.......8771..9....82.7..495.3.26.17.",
            ".5.8...4.38.4..715.7...5.....7.3..81...972...54..8.9.....2...6.692..3.58.3...8.9.",
            "31.9....6.....8..3.45....8..8...1.977.......413.4...5..2....87.8..7.....9....3.41",
            "25738....1....2.....8.....24..1.5..8.......945..8.6..7..1.....99....8...68245....",
            "1..4.......83..9..4......71584.3..1..2..7..8..1..4.63595......6..6..21.......4..3",
            "..9...6.....2.1....7856942....314...4.17.29.3.........945...362..........2.453.8.",
            ".91.8.246..........62.71...84.3...97.........62...7.34...13.78..........234.6.51.",
            ".38..6......985..6..6.3.8.268..5..2..218.495..4..9..878.4.7.2..9..318......5..79.",
            ".53.7.86....943....24...31.8.5.6.7.3...7.5.............4.....8....1.2...3...9...5",
            ".2..8..5.635..1.98...5...2..5.4.39..9.......2..76.9.4..7...4...26.7..839.1..9..6.",
            "9..2.8..78...4...9.4.9.7.5...35.91...2.....3...7.8.6..2..4.5..3...162............",
            "9.2...6.7...2..1..76..1...3...9.2.1...9.7.4...5.4.6...5...3..42..1..8...2.6...7.1",
            ".69.1...5.1.5.....2.3.68......8..9...9....7.3...2..5..8.1.97....2.6......36.5...8",
            ".....3.8.86...1.4...154.9..95.3.74....6...2....26.5.37..4.523...7.8...54.9.4.....",
            "6...3..241.5........26..19....9.78..4.......9..98.4....56..19........5.737..9...6",
            ".........3.7...6.2.6.291.4..3.128.9....6.5.....1...5..9...8...6658...374.1..7..8.",
            "9.2..65.1.1.2.....5..4...6.6.7.....5.3..89..48.1.....33..1...7..2.7.....7.4..31.6",
            ".........8..1.7..9.2.645.1.35.9.1.48.87...92.6.......35.4.7.6.1..........16.3.58.",
            "3.4.......7....1.829.8...37..8.....4..37.56..9.....5..63...9.457.5....6.......7.2",
            "1..8.2..3..76.41....3...4....4...5...8.....1....327......5.6...25..1..94..82.96..",
            "9..34...6.3.6.5.7...87..3...7....9536.......7385....4...6..41...5.8.1.9.4...39..8",
            "82..6..54..9...2...........19.6.8.35.4.....8..8.174.2....817.......4....2.8.3.1.9",
            "..3.7.1....16.93......8....2..9.1..34.8.2.7.1..9.4.2..6..4.7..519.....78.........",
            ".3....5..2..8...97...25.36.79.....8...3.6.4...6.....32.42.91...67...5..1..9....7.",
            ".3....12.5.8.4...99...83.5...7.5.....947.158.....6.7...4.81...57...3.8.6.62....3.",
            "...8419.....96....4.1..58..1.95.8.4663.....8585.3.61.7..56..4.8....84.....8153...",
            "..1...7.....45....6.4.215.9..5.8..7..185.236..6..4.9..8.691.2.5....78.....9...8..",
            "4..5....1.18..954..5...4.3..73.4...5...6.8...6...3.41..2.1...5..863..17.7....6..2",
            "9......35.8..5.7.1.....382.2.517...8..3......4.763...9.....217..4..1.9.21......84",
            "...59.3.......68..7632..4...1..8.2.53..7.4..82.7.5..4...5..3782..28.......6.42...",
            ".1.675..9..2...7.....4....6.6.5.8.4..23.4.9.8.7.2.1.6....8....5..6...8...8.359..2",
            "...1.5...5.......84.......9..34.61.....2.1...96.....32..5.6.7....68.72..8..3.4..1",
            "8.4...6.5.9.....8...7.2.3...4.9.5.6..51.8.47............5...8..47.5.3.96...478...",
            "61..9.28..8.7.2.........53...5..14.........1...6..37........82..5.4.6...83..7.15.",
            "...763....1.9.438..3.......86..2..434..3.9..672..4..58.......9..456.1.2....895...",
            "84.271.96..6...2...9.....4.13.5.7.64.5..2..7.7...1...5....5....5.3.8.4.2..8...5..",
            "6..7.1.8387...5.9...48..7..21....9.6.........4.5....18..9..81...3.9...6512.4.7..9",
            "1.2...5.9....8.............7..5.4..2..6.7.8...13...75...87.91..9..8.6..3.7.341.6.",
            ".175.....8.....9.16...93.......4..3...9.2.148....3..9.4...17...7.....4.6.682.....",
            "82.97..1669..2..85...8.........5.6.445.2.6.312.6.4.........2...57..3..4914..97.68",
            "....96......3..65..62..89.....4..2...26...87...9..3.....38..79..91..2......54....",
            ".4...7.1.13...2.89....3....62.1.4.....5.6.1.....3.5.94....7....86.4...52.1.2...3.",
            "....4........1....4..6.3..7.9.3.4.2..21...48.5.......96.8...2.5..58371....92.58..",
            "58..9..4...72.......18.5....6541..9...........4..3851....9.26.......38...1..4..25",
            ".382.4.7.7....59.3.5..3...224......9..9...2..5......368...5..6.3.64....5.9.1.832.",
            "1.6..95.2.....81..93.1....881.2.34.............24.1.596....7.14..19.....5.38..9.7",
            "1...6...8...9.32...7.81.....3..7.86.6.41.23.5.85.3..9.....58.2...74.1...8...9...1",
            "..15.6..9.5.8.36....9....8.....6.4..38..1.7......5.3....4....3..7.2.98....86.7..4",
            "49....376621....947....4.1...9.5.......3.8.......2.1...1.8....258....961267....45",
            "51.9....8...7..2.9.3.548.....5...781..4...9..321...5.....425.9.4.2..6...9....7.25",
            "3..948..18921.7643..........5.4.9.2...96731............7.....1..8.....3.9.32.45.6",
            "..2..5..85.3.17...9........3216..5.............8..4791........6...34.1.74..5..2..",
            ".....9.7..3...54.95..4...8..72......6..7..1.4.13......2..9...5..5...26.1.....8.2.",
            "......86..9..6..248...3.1..3.9..1....4.......1.5..7...9...4.6...6..5..71......58.",
            ".725.......4..3..1..5..8294.462.9..7.........7..4.658.6913..8..5..8..4.......517.",
            "1.4..6..2..35.......5..17492.7.8..5....2.5....5..4.2.19723..4.......78..4..6..1.7",
            "36.....279.17....6..52..39.....9.67....5.4....94.7.....42..17..1....52.858.....43",
            };

        static string[] EasyPuzzles =
            {
            ".3.1..6....9..4.3.16..5....2...6.5..5..3.7..9..6.2...3....9..21.7.4..9....2..6.4.",
            "..1.643..2......5.4.92.........3..74..39.21..94..7.........76.2.6......1..839.5..",
            ".85....9...18....32..1.47...2......4.9..5..1.8......2...23.6..55....93...3....27.",
            "2....71...7....9.4.1.3.....8.1.5..2....2.8...5.3.7..1..5.6......8....6.51....93..",
            "6..9.3..2....4....9.......54..5.9..82.3.1.5.4.9.....7..5.7.1.8..1.....5...4.3.1..",
            ".9...7....1.5..9..5.814......7..1..6..98.31..6..2..8......127.5..3..8.1....7...9.",
            "8..5.9..7.....82...567..9..18....3.4....5....2.3....65..1..248...28.....9..4.7..1",
            "..........5.269.1...9.3.5....68.27..1.5...4.87.8...2.5..........9.6.4.5...71.53..",
            "4..73....8....9.4..324....1.7.....28...1.7...95.....7.5....189..4.9....5....24..3",
            ".28...1....7..2..41.5..7928.91826......9.4......35127.8795..4.25..7..8....6...79.",
            ".5.....1..28.1.43...17.28......7....8...2...1.7.....8.14..9..57.32...94....3.5...",
            ".4.2.7.3.6....3..7..1.8.2..39.4.8..2..7...9..8..7.9.15..4.2.3..1..3....9.7.8.6.5.",
            "...6.8...74.....61..5...2..479...625.2..7..3.6...9...7.8.5.3.7..3..4..1..........",
            ".3.....9...53928..26.....41...923.....4.8.1..8.......2.5.4.8.1.9...5...4...6.9...",
            "....79....72.1.5.6........32.....15.6..54.8..7.....69.........5.16.5.4.9....98...",
            ".78.....6.....712.4.2....9.....32.8.9...8...2.8.57.....2....9.7.149.....5.....81.",
            "4..9.7.812.56.1........4.7.916....48.........75....326.8.5........8.61.263.7.2..4",
            "..52397..4.16.82.3.........5..3.7..2.8..5..9...........7.....4..14...32.9...6...1",
            "....9.....49...18...16349..8.3.1.5.4..7.4.6.....2.5....7.....1.6...7...2..4...7..",
            "....5...3.1.4.9..253.....46..87.....1.75...8...96.....87.....64.9.1.7..8....8...1",
            "....27...1..9...6.6.2...7.5..62.5...8.4.....6..17.8...3.8...5.72..5...8.....71...",
            "6...53..1..2..93...1.....8.29.5.1...1...7...5...9.4.16.5.....3...93..1..3..89...2",
            "..4.8....27...6.51.1...2..4...1...8.925.........4...2..9...8..734...5.98..8.7....",
            ".2...9...9....6..7...8.41.22.84...1..6.......7.19...8....7.52.13....2..5.4...8...",
            "9.1.4.3.7..7...6...6.7.1.4.....1.....5.....9.6..379..45...9...14.......2.93...78.",
            "5...3...6...9.8.....2...3..3.7...6.22.......9...8.5......3.9....6..8..4..854.297.",
            "7..6...9881..5..4......8.....17.3..9.4.....2.6..5.94.....3......3..7..1418...4..5",
            "1.......2...6.8...85.....39...745....1.....7.....6.....368.149.4...2...7.9.....1.",
            ".8..4652.....5.....6.2..7.9.5....9.7..6...4..4.7....3.2.8..4.9.....1.....4538..1.",
            "...34..9.94.....8...27..3.....2.58.42.......78.46.9.....7..36...5.....31.3..21...",
            "...46..9.674..3...2........1.5..2....2..9..4....7..6.1........3...3..214.3..85...",
            "...7.5...56.....79.2..9..4.3...4...1..23.15..4...5...6.96...12.1.......7....3....",
            ".2.5.......5..7..8..3.6125..79.....4..2.3.1..4.....78..1487.9..5..6..3.......5.2.",
            "....8.......9.2....49.6.13.8.4...5.9..24917......3.....26...45.5...1...2..3...8..",
            "56......7..8.23..5...5.8.1..43.1.5...8.2.4.7...1.8.32..2.1.7...8..36.1..1......63",
            "9...73....76....9.45...27..51..3..4...........4..1..63..57...19.8....62....56...4",
            "59..1.82...738..45.......6..3.1.2.....6.......7.9.4..........8...965..1462..4.57.",
            ".........36.....85..54.72..9..251..42.1.4.8.3...................1.5.8.7..72...95.",
            ".2..5..6.6.3...9.1.........5.......8.3..7..5.9.8.1.3.61.......4.8.....3.36.8.9.12",
            ".1..3..6.5...67..8..3..51...74......35.....41......75...13..9..4..28...7.8..9..2.",
            ".82..36..3.9....78.5....1....8..1..5...4.7...2..6..8....3....8.62....4.9..49..51.",
            "....869..3....25.754........5...9.2.6.2.3..8..3...7.5.76.......9....46.8....682..",
            "13......6.4...6.13..917.5...1..5.4....36.98....2.3..6...4.613..39.5...2.6......85",
            "..9.........6....58.6217...937.5.....1..4..9.....9.517...5783.46....4.........1..",
            "..7........31697...2.7...46.7..5.26..6.9.3.8..95.2..1.95...2.7...25469........6..",
            "18....9.....6.7.3.7.98.....39.16...5.........2...54.98.....91.2.2.3.5.....7....83",
            "...........14.85..93..1..48..27.93...4.5.6.2..5.....9..9.6.2.5.8...9...4.6.....1.",
            "...7..3...2.8...5.8.4.5.1......7..34..12.58..53..9......3.8.6.2.7...9.1...9..1...",
            "9...4...86.7...5.3.8.....1...42.93...3.4.7.8.2.......5.4.516.3..6..7..2..........",
            "2...9....6...7.32....3...481.54...9...2...1...7...65.378...3....56.8...7....4...9",
            ".8..97..25....3.8.691..........2..54...5.........3..78723......9....1.2..5..74..6",
            "..619...8.3.8..1...1.....2.8...45...1..7.9..2...32...5.4.....5...5..7.9.7...346..",
            "7..9..2.1.21.87.9.9..4...7..1....5.7.9.....3.5.7....1..4...1..5.7.35.16.1.6..9..4",
            "24....6.3.3..86.9.....4.....1.6.....987...561.....7.3.....6.....9.72..8.1.4....25",
            ".4.3..17.3.....6.856...9.....3.4...1...8.2...1...5.4.....7...647.4.....2.31..4.8.",
            "5...69..119...2.4...25....3.2.6..7....8.7..1..1.8..4....13....473...4.6.8...26..7",
            ".4..71....2.8.3...6...2..84..5....478..5....6..1....527...1..68.8.2.9....5..68...",
            ".48..52.16........3....2..7....73.429..5..1......61.758....6..91.........65..47.3",
            "..81.24.....4.5...7...6...1...591......8.6.....9...6..6.......9..1.3.7..24.7.9.65",
            "..378..5.2..9..8...8..54..3..2....763.7...1.256....4..1..82..6...9..5..4.2..473..",
            "2..9.6..7.941..83..5.3...9.1.....489.........387.....1.6...9.1..72..136.5..6.7..4",
            "6..2...84294.56..3.3.4.....84.9.7.......6.......3.5.78.....4.3.3..68.14248...2..7",
            "....6....47.....51..2...7..3.5...6.2.2.....9.7.42.53.81..6.2..5.8.....7...3.8.1..",
            "..2..8...4..1..2...8.2....7.5..2...6..1.4.82..7..1...4.3.6....99..3..6....8..4...",
            "78....5.2....9.......1....82.4..17...9.6.4...6.1..94.....8....7....5....47....3.6",
            "...154...1.4...6.32.......4...482...9.75.34.2.........4...3...759..2..4876.....91",
            ".4.6.......6.7.2.33...8...1..7....2.6....1.57..9....8.7...4...2..5.3.7.8.6.2.....",
            ".3....4..7.63...15..2.8..6.2...5..8...1....2.5...4..9...5.6..4.8.49...57.6....2..",
            ".2...56...864...953......7.9...2..1....981....6..4...8.9......257...683...21...5.",
            ".4..6..8.81...........89..53...214...2.65...94...971......15..667........5..7..9.",
            "94........3..8.29......7..4..3..6..145.....367..5..4..5..8......29.5..8........75",
            "3.6.4.9.1..8.2.5..1..5.6..3.4..6..1.8.......7....................39.84..9.21.46.5",
            ".5.....7...64..3...17.3.8..5.1.46.........1367.8.93....95.8.4....26..9...4.....1.",
            "..83.........82..35.4.16..2.9....2...2.8.5.6...5....9.7..14.9.54..76.........84..",
            "..9.4..1.1.48..5...5..91.36..6....8.9.2...3.7.1....6..62.31..7...1..42.5.8..5.1..",
            ".2...58...5...2..67...6...91826...................84155...1...76..5...4...93...8.",
            "....4....93..6..181.......74.6...7.2.1.8.6.5.5..4.7..9.75...94...1...8..6.......3",
            "5..3.1.2.2...4.57.........9.5...6..7..7....1..1...2..8........24...2.13.3..1.7.6.",
            "..8.5........1482..1.6..5..6....7..9.97...63.5..8....1..2..5.1..8549........8.3..",
            ".94..7....5...4.72...61...591....7....6.5.3....3....612...93...38.1...2....8..69.",
            "...........64958....28.31......3.....29...63.16..8..542..6.7..9..1...2..3.......7",
            "8...4.6795........4.67..3.....9.62..1...8...6..23.5.....1..49.3........5945.3...2",
            "5...3...8.8.6.5.1..14...25.2...5...4..........4.7.6.8.6.7.9.4.21.......9.93...86.",
            "8.4.3.1.2.3.....8.9.6...3.7...4.7...67.8.3.14.4.....2..82.9.57.1..2.5..8....4....",
            "8..6.2..92.......1.71...46.75.....93..6...2..9.......4.4.5.3.2....197...3...4...5",
            "..532..6....54..814.6......2....5..6....1.9..5....8..77.1.........76..38..345..7.",
            "25.8..3.9...9.54.264........2..5..37...4.8...17..3..4........145.62.4...4.8..7.26",
            "5..3..4...2..8....9.7.....8..8..592..7....6.1..1..657.7.9.....2.5..7....1..5..7..",
            "...13..4.81..4.92..6...........6...242.5.1.637...9...........8..45.8..16.3..29...",
            ".........2...5...6...2.4...68..2..19.5.....8...9.1.3....5...9...6.3.5.2.3.26.74.8",
            "..87.21.....139.....3...2.....314............2..9.8..15...7...2.84...35.12.....86",
            "7.53..1.8....19...9..5.8..7.21...7.9.5.....8.4.8...21.2..9.3..1...46....5.3..76.4",
            ".7.....1..384.1.....1...2....689.....92...87.....751....7...4.....3.462..2.....9.",
            "9.2.1...71.4.7.598...8............1..2.483.7..7............9...296.4.1.53...6.9.2",
            "7.....2.6...6.38..65..9.....6.4.9.2...1...7...2.5.8.4.....4..68..69.1...5.8.....2",
            "9.5...7.36.......5..2...8...26.3.45....8.7....8.5.4.2...7.5.6...4..8..7...37.25..",
            "...2.61....9.786..4.......2..4....2.87..9..46.5....7..5.......1..716.2....14.9...",
            "..5.2.7...7.1.4.6..........3...5...8.5.....2...13.94..78.....12.........239.1.875",
            "..2.6..3.1..2.......83..9.7....4.37.6..1.8..4.47.3....7.4..35.......9..2.2..8.1..",
            ".34.2.....983......5...67.8....7.68....5.2....19.6....2.39...6......324.....8.39.",
            };
        static string[] IntermediatePuzzles =
            {
            "23......7.9..32.18..89..2...2..5.8...6.7.8.9...1.4..2...6..73..14.58..6.3......82",
            ".42...85.3..4.6..1..9...7.....6.8...5.......278.215.63.3.....7.....6.....7.3.9.2.",
            ".3..5....5......4...79....2.4..967....87......9..382....54....12......6..7..2....",
            ".3.4..526..43........27....1.......734.7.9.627.......4....83........76..519..2.8.",
            "728...531....5........2....2.......9....9....6..7.8..4.67...15..5.961.8.8.1...9.3",
            "..2.6.9...4.....5....418....386.157...........213.748...58.97.....176...9.......8",
            "............796...6.9...2.3.15...89.....1.......3.5...7...4...5..48.71..1.8.5.6.7",
            ".....5769.......8.36....4.5.7.56..3..2..1..7..5..83.9.6.2....58.3.......5894.....",
            "3....1.751..2..9...9..4....5..9.4.1...6.8.7...1.3.6..4....1..6...2..9..764.8....9",
            ".319..2...2...4......27..3....4..87.34....6.....5..92....18..9..9...7....823..4..",
            "...2....82..9.74.6..75..........9.7.765...291.4.1..........51..5.38.6..26....3...",
            "8.3.2.9.4...9.8.............5.....4.1..532..99...4...1....1.....2.8.5.1.56.....83",
            "4.71.68.2..........9.....3..1.3.2.7...8.9.3..3.......5..6.5.2....56.81...2..7..5.",
            "..4...8...8..53.7........39.537.6.4..19.......674.9.8........28.9..74.5...5...1..",
            "2.......94.9...5.2..19.87....43926.....5.4......7.1....2.....6..4..3..5.87.....13",
            "2..1.....51.....6246.7..1.9.....2.8....359....4.8.....9.3..4.1612.....43.....1..7",
            "3..9.8..7.59...43...24.58...8..1..9..1.7.9.6.....6...............81.47...9.....4.",
            "...3......48...5..67..9.1...34.2.68.7.......1.82.3.49...7.4..36..6...85......9...",
            "8..2..3....7..9.6..3......7.2587........5.....7391.....4......6..2..8.4.6..4..9..",
            ".9..8.1.......1..6...62.5.84.1...3....37.46....8...2.53.9.76...2..5.......6.3..1.",
            ".9..7...564....7.....3.41...6.14...83.......68...35.4...65.3.....2....134...1..5.",
            "...9.......2...37.5...47..14.851......1..3...2.768....1...72..6..6...82....3.....",
            ".1.........6..134.....9..128..4..13....3.6....49..5..693..6.....258..6.........7.",
            ".9...34....4...3.5..2.56.....7....239.65....7..5....89..9.84.....3...2.4.2...98..",
            "...568.....6.3.4..3.......2..2...8..85.....67..3.8.1..6...7...1.2.....4.13.256.78",
            "8.......3..573.8.....6...2.6.....2.73.8..7.4.4.....9.8...5...9...327.6..7.......4",
            "6..87....1.7..6....94.......5.7...3...8.1.4...6...4.5.......89....3..1.2....58..3",
            "6..3.5...271...5....3.6.........839.3.8...1.4.521.........8.4....5...971...7.3..5",
            "..8.6.41...1..7.5.6.35....9...7..24...........37..9...1....83.6.8.1..5...65.7.1..",
            "...519.....3...4...5.....1...4.8.1..8.57.13.2.1..3..9.346...725....7.......2.3...",
            ".....4..2..8.729..6.2....4....7..6.4.....3.5....2..3.17.9....1...6.597.......7..3",
            "3..67..484...1.6...6.8...........5.797.....845.8...........2.7...2.4...373..56..9",
            "8...3.5...2......965...8.7....27....71..6..32....85....3.8...955......6...4.5...1",
            ".2......44..9.1.28..54...9.1..345....9.....4.3..289.....18...7.2..7.4.56.5......1",
            "..21...8.9.3..46...1..2..34.3.2.9..8..7...1..8..5.7.6.32..7..1...63..7.5.7...12..",
            ".9...3....4..8..5.3.1.....9.3..2.18...25.14...14.9..2.4.....9.5.6..3..7....9...6.",
            ".4..5..1...........2.3.4.6.3.7...6.16..7.8..4..................1.24.73.5.5.621.8.",
            "6.4..27...5..9....2..1......2...61...4.8.7.2...19...5......5..8....4..1...92..5.7",
            "..7.6.......5.9.....8.723.5.94.1..5.6.12.89.3.2..5.16.3.972.6.....8.6.......3.5..",
            "..7..69..1.3..9........7.41......35.2.......4.85......72.8........2..1.7..16..5..",
            ".5...64....375...16..9...3.2.....91..1..4..7..74.....5.6...2..83...817....85...2.",
            ".64...1..5...3...6....72....3.....9...6.293...4.....5.....68...7...4...8.28...5..",
            "....3..163.1....42..8.....7....23.....34789.....51....1.....6..87....2.565..4....",
            ".....9.......36192...1..6..95..84.3...63...5.28..71.6....9..7......57389.....8...",
            "1.96....83....1.6.....5...1.9....67..6..82....3....28.....3...78....5.4.4.58....2",
            "..7.5.....25.1.43..498........16.....6.....5.....42........719..32.9.56.....2.3..",
            "5......2..2...6..8..1.7..6.9....5.....3.916.52....3.....7.1..4..5...7..63......8.",
            "7.15...328.5...9...43...851...4.5..3....7....6..1.3...152...68...6...2.447...63.5",
            "..6....93.5.4.....42.98..5..9.87.3......6......7.29.8..6..48.35.....1.7.73....8..",
            "..........978.625..1.3.7.9..7.....2.5.......8..1.6.3...5.....4.3.87.49.2..2...6..",
            "4.7...5.3...........65.18...29...65.14.....32.5.4.2.8.57.823.69....7.......9.5...",
            "95...64328.39....54......6.2...3..7....5.9....8..2...1.4......35....86.43264...87",
            "47..........36....39281....21.7..6....3...8....7..8.12....89726....73..........94",
            "..95824............2.714.5.5.......2.47...53....4.1...6.......7.1.9.8.2..3.....9.",
            "..76.41....1...9..59.....36....4....6..2.7..17..5.1..9...8.5...1...6...8..63.25..",
            ".7...23..6....3.91...9...8.38.12....9....6...74.38.......6...3.8....7.59.1...87..",
            "93.........58....1...534..91...423......8......291...82..753...8....12.........75",
            ".5.1........9..6.8..3.8..41.2.49...5.8.....6.3...18.2.23..7.5..6.7..9........2.3.",
            "93..2.....84.3..6..76.....9.....57...91...45...24.....6.....91..1..5.62.....6..45",
            ".7.2.1.6...35.67...........4.1...3.8...........78.46..3.......6.24.6.91.95.....73",
            ".1.8.....6...39....582.1...94....1..2...9...6..7....35...3.729....42...8.....6.5.",
            ".49.1........58..97...4.2.1.1.....4...26..7...5.....6.2...8.1.6....24..7.91.6....",
            ".........63.....58..47.21...........4..859..77...3...124.....798...9...5.7.....8.",
            ".4...123.9.26....51..2...6.8..1.945...........173.5..6.2...6..17....26.3.689...2.",
            "..8.2.....7.6..52..2.7.9..6..6...49.5.......1.91...8..3..2.8.5..19..6.3.....7.6..",
            "....6......93.48..68.....349.......2...1.2....3.6.8.5...6...3..2.......93..527..8",
            "4.......7.1...83.....67..5...45..6.9.6..2..7.9.7..14...8..43.....92...8.5.......3",
            "5..8........2.4.78.6.......82....63..9.6....461....75..5..........1.9.261..4.....",
            "6..827..1.14...86...7...9...51...68..6.....4.4...6...2...673.....9.8.2......1....",
            "3.6....12..28..3...4.6.2.......8913.........9....6527..5.2.8.....45..7..2.7....53",
            ".1..49....5......72...3.8....95..6........45...23..1..3...7.5...2......1.9..63...",
            ".....1...3.8....17..183.92..1.3.6...2.......9...2.5.8..39.528..84....6.1...1.....",
            "8..9...........795.7..5..2..4.7.9..8..14..2...3.8.1..7.9..8..7.......5365..3.....",
            ".7.5.1.6...57.61.....8.3...4.2.3.9.851.....24.........6..472..9.8.....4...9...2..",
            ".9.....5.4.......2...914....6.3.8.1..1.6.2.8...3.5.9....5...2..9..2.6..5...785...",
            ".96....7878..93...1..7.........37...3.2...5.7...42.........9..4...14..6364....95.",
            "9...2....3..9..82..2...6.7......95.3...7.4...2.15......5.6...1..36..1..2....5...8",
            ".....4....4.5..3....16..5.7.....92.337.....156.93.....9.4..58....8..6.2....8.....",
            "..9.315.....7.6...15........84.7..257.......851..8.76........49...2.7.....859.6..",
            "...5...36.842..51......1..89...47.....1...8.....16...25..6......18..562.43...8...",
            ".5.....34..89....2.....1.6.6..2....52.73....85..4....1.....2.8...25....7.4.....23",
            "......1.5..2...8....63.1.27.79....51...9.5...52....68.69.8.73....7...5..3.8......",
            "7....6...19....4.3.8..1.5.....7....43..85..1....6....7.3..8.9..67....2.89....2...",
            "5.8....913..........2.187.3..51.2.....9.4.2.....8.75..8.436.1..........792....6.4",
            "...8.74.......31..568.......1.3.4.7648.....3..5.6.9.14195...........87.....1.56..",
            "..1.4.3...8.97..4.2...5..1......7..6..6...7..4..3......3..9...5.2..84.3...5.3.8..",
            "..28.1..6.3...........9.8..45..1..8...7..2.4.92..8..3.....2.1...7.........53.6..7",
            "....4.1..9.46..72..8.9........29..14.9...4......36..82.1.8.....3.51..86.....5.3..",
            "...9.12....1..6.4.....2...81.....5.67.4..59.32.....8.4....1...2..9..7.8....3.94..",
            "..1...25....54.8..78...2.3.4...6....1..85.6..8...7....37...4.2....62.7....4...16.",
            ".2.495.1.....7....8.......9.9.....5.2.8...4.1..6.1.3..6.2.4.1.55..637..8....5....",
            "21....7...4..372......4......9..3..71..5.9..66..1..9......9......738..1...8....63",
            "..9...2..1...7...552..3..17.78...15..........9..458..6.4.763.9...75.96...........",
            ".5..8.4.....1.2..........758...24.9.39...8.275...13.8........69...6.9....6..4.3..",
            "38..9...5.7..6.983.9..........9.2...65..7..48...6.8..........1.127.3..5.9...2..34",
            ".3.8.9.5.19..6..74..........6.3.5.8.7...2...6..2...5............48.5.79...1...3..",
            "4.......1.8.4.9.6..6..5..4...2...8..1..7.6..9.5.....1.2.8.4.1.63..2.8..5....3....",
            "..8..6.927...4........79.4..1....37.3.......6.9....85.....67.1.6...8......3..1.84",
            ".......67...14...5..8.59...3.95..4...4.....8...1..43.6...63.2..4...85...82.......",
            "7...3...9...4.5....246.975..1.....7.9.......1..82.15..29.....17.........53..9..84",
            };

        static string[] ExpertPuzzles =
            {
            "..12...9.6...95.4...9..1..5.34..........7.1.2.62........7..9..69...38.1...36...8.",
            "6...95..8.9...6.1....1.....35.4.26..7.......5..98.1.43.....7....8.6...3.1..54...2",
            "984.3..5.....1..8..1....7.3..74.56....5........83.29...7....8.4....4..6.469.5..2.",
            ".8...2..51.75.4.....2.1...7875.........3.6.........9724...6.7.....1.54.35..4...1.",
            "4....193.25.49..7...9.....4..6..7...7...2...1...5..3..8.....1...1..85.63.231....8",
            "........29...5..1..2.9.4..3.3..452..25.....41..712..3.4..7.1.8..1..8...47........",
            "9....76.8..456..........32..1.....7.8...3.9...4.....5.......29...129....7....64.1",
            "4...9.....3.1.2..9.6.85..13..9..6.......8..6...3..7....9.43..51.4.5.1..81...2....",
            "32..9..856..3.5..2..1...3..4.......1.6.923.4...8...5..8.......7...567.....2.4.9..",
            "6....4........692.57......3..74.8...8.5.2.3.1...7.14..1......52.281........2....4",
            ".457.293....6.4....3.....7....379.......6.....961.548.5.......34.......987.....25",
            ".8....62.1...8...95..7.3.....68.43...7.....9...42.91.....9.8..47...6...5.18....3.",
            "43..5..29.8.....3...93487...7..6..9....592.............97...16..5.9.7.8.8.......2",
            ".5.....817....53...382........9.1.7...9....1....6.7.2..168.....5....29...9.....32",
            "3..1.4.2..2..73.59.....5........1.9.18.....67.6.7........5.....45.83..1..7.2.6..3",
            "5.32...787..6.........18..4..2....63..5...9..93....7..2..37.........2..645...13.7",
            "32.45...8...3.8.2.....61....7.....424..7.2.9..8.....76....89......6.3.8.81.52...7",
            ".7...6.....2.1...3..5.3267.8.9.......34...85.......7.9.2874.9..1...5.4.....1...8.",
            "5...9.....63......9....72....2..3.87.15...92.37.9..5....82....5......71.....1...4",
            "..7......31..64...9..7..4....862...9.....71.8..518...68..4..3..52..36.....4......",
            "8..3...7..34.87.5.9...2.....95...4..3.......5..2...61.....7...3.1.63.54..6...9..1",
            "...2......5....9212..9...7....89.7..93..7..46..6.31....7...9..4348....9......8...",
            ".1.69..4.8..7..1.2.2...8.....18.4.235.......464.9.15.....1...7.2.9..7..1.6..83.5.",
            "..1..4.......1.8...2.63...44...8.5...681.543...2.7...85...69.7...6.4.......2..3..",
            "..2....3......2..537...589.1.4..9.86....5....28.3..9.4.134...288..5......4....6..",
            "5..189..4.........3.8...6.21..3.2..82.3.9.4.6.5..1..3.9...4...37..9.6..5...8.5...",
            ".........6.19.25.445.....92.........1..6.5..9..38.92......2....2.7...4.59..714..3",
            "9..3..6...2......18.31...2.1...96..8.79...16.5..72...4.4...98.63......9...6..8..3",
            "8.926.....641..9....1.......7..2..8...8.4.1...4..7..6.......4....7..461.....927.5",
            "..6.8.1.9..5..9.62......7...4.9.26...1..6.....3.5.79........3....4..3.17..3.9.5.6",
            ".3..5.7.4.....4....4.32.5.....4....38..7.9..53....1.....5.48.2....9.....4.8.7..6.",
            "51.7......4.........74.5.13...9.45.1.8...649....1.36.8..62.9.74.7.......19.3.....",
            "94..36.1.8..7........84.9..5...6....7..3.5..6....9...3..5.21........8..7.8.97..62",
            "98..17.....1.93.7.6..5............87.4.72.9.5.......423..9.......5.34.6.21..76...",
            ".....9...7.962......4.71.325.2...6...4..1..5...8...7.427.14.3......374.6...9.....",
            "6.9...3.55..9.4..6....3......6...2..34.2.9.812..3.7..49.......2...728.....3...5..",
            "...5.4.....9.2.8...4.....7..63...75.7.5.9.3.8..8.7.2...3.....1...7.4.5..6.......2",
            ".98.1........497..347.5...........61.82..1..4.......38615.8........631...23.9....",
            ".37.5.48....9.8...2.......6.5.6.1.2...6.3.1...4..7..3...........75...84..9.814.6.",
            ".8.7...3.67..83.51.....5....29.....8.4..9..6.1.....92....6.....75.81..96.3...7.8.",
            "..1.7..966....4..8...8......95...2...8..43.7..36...8.....1.....5....2..4..3.9..65",
            "4........57....3.4..1.89.....3.7..8..4..16.....9.3..5...7.41...68....2.73........",
            "8......3..3....29....213..52...351.....742.....519...21..958....28....4..5......9",
            "7.2...4.5.........3..857..16.12.87.9..84.16...........5.......6.7..9..1.1..7.5..2",
            "....4...8...7..3...27.86..9..98.51.2..1...8..5.34.19..9..36.72...6..8...4...5....",
            "...5..6.33.5..7.1.98....2......1..85.3.2.........4..2182....5..5.9..1.7....8..1.9",
            ".72.4..3......6.755.4.3...2.1.8.........6.........4.5.1...2.7.878.5......2..8.59.",
            ".28....3.9..2..7.1.4..8...9...1.2.7...9.3.1...1.4.8...4...2..1.7.2..6..4.6....82.",
            "..1.35....5...19...3....15...978....7.3...8.1....147...98....7...49...2....47.6..",
            "....4....5.2...3.449..3..1728.....71..3.7.5.....2.5...3..987..69.......57.......3",
            "..5.6.9..9..3.5..2..2...5..2..6.7..3.7.....1....931......8.2...1.......9587...624",
            ".4.892.1.9...1...5..7...3......8.....96...15.7.4.3.9.6...7.6.............75...26.",
            ".3.5......9...3.68..5.8.4...4.6.8..9..9.7.8..3..1.9.2...3.6.9..18.9...3......2.8.",
            "..78.42...146.358.....2......97.81...6.....7....435....45...39.9.......27...1...4",
            "...42....7..6..34..4.8....695.1.......3...1.......4.971....2.8..27..6..3....13...",
            "4...1.2.5.96.8..1.2.5..468...7......14.....58......4...295..3.1.3..9.57.5.1.3...9",
            "..5.18....3.2...1....3.4..65.6...38.2.......1.98...5.27..4.6....6...3.9....59.8..",
            "5..74..2.9.....4...8.9.2.5......4..5...815...1..2......2.6.1.8...5.....1.6..87..9",
            "6...3..41..8..5...1.......929.36.1.8...5.8...8.3.79.269.......5...6..7..56..9...2",
            ".536.872..............5....6...4...3............765...36.5.1.98..19365...2..8..6.",
            "6..7.5..24..1.9..5....2....76.....319.4.6.2.7.2.....4.....7....25.6.4.18..9.1.7..",
            "..9..6.....47..9...58..27341.75.8.2...........9.6.35.19732..18...1..74.....8..3..",
            "8.5.1.6.3...3.7...7...5...13.......52.4...1.9.8.....4..9..4..1.1.39.67.4....7....",
            ".....1..7...7935..6..4...3.2.76.4.....1.25...8.51.9...5..9...7....5179.......6..4",
            "2.......8...........37.69.....578.....8.4.6...........3.4.6.7.9.9.1.2.5..85...36.",
            "......5.34..2.....53.7...8..649.2.51.5....9...914.8.3667.3...9.8..1...........3.8",
            ".4..8..9..9.....2..78.1.56....738...21.9.5.87............327...1.3...6.5.........",
            "...2.93...531...8.9....8.5.1.56.2.38.........68.3.59.2.4.9....3.6...412...25.3...",
            ".7.4.6.....8...2..96.....1...23...69....5.72...79...8583.....7...1...8...9.8.3...",
            "...52.49..3..4..8.........654...8..9.91...53.3..2...417.........2..5..7..54.31...",
            "....79168.9.2.8.....7......738......1.9...5.7......814......7.....5.6.9.42593....",
            "4..9.27.....57..3..9....4...5.42..7...........6..18.5...6....8..1..85.....57.6..1",
            "....9.......3.4.....4.2.3.....7.1...53.2.9.74..6...1..1.26.58.37.9...4.6.83...51.",
            "6....18.94..2..3.7..9.3.....4.1.....5..324..6.....8.5.....1.9..1.7..2..49.57....1",
            "73......5..826...3..6..382...96.1.8..7.....6..2.3.79...948..2..1...927..2......96",
            "..26.8...51......6.....14..64.9.5.2.....8....18.4.2.3......45..47......9..61.3...",
            "4.6...3.8...6.3......241....5..1..6.9..5.7..4.........18..2..53..5.3.9...79...24.",
            "...9.3...13.....648..612..9...4.7....2..3..1.4.......6....7......5...6..79..5..81",
            "..3..8.656.97.3..4......3..1.4.........9..7535.7............6..4.65.9..8..8..6.97",
            "728.4......9.6...13...5......2..653..8..2..6..573..4......9...52...7.3......3.824",
            "62......7..4.27..6...4.6.2..156.37...6.....3...75.864..4.9.5...7..23.8..1......79",
            ".475...9....4...3..8..9.2...382...7...4.6.5...9...582...9.7..8..1...4....2...846.",
            "13..48.......2.9....49.38..9.6.......8.....1.......7.9..25.43....8.6.......78..45",
            ".2....9.....65...44.1.923....21.5.8..37.6.15..5.2.84....438.5.73...29.....5....3.",
            "76..1..53..9...1..2.......9..2...3.....6.7...9.......8...5.3....83.2.57.5..4.8..2",
            "..91.43...........18.....46.7.2.3.1...19.64..2...4...3..8.2.7.....5.7....57...96.",
            "...65.4..4.7........1.....536.1.7.2....8.5....4.9.6.515.....7........2.9..4.82...",
            ".23..8....6.....25..59..3.43..8954.....6.2.....6341..26.4..97..58.....3....5..14.",
            "6..3...4.7.3.59.....26....7....3...2.67.8.45.1...6....8....65.....54.7.8.7...3..1",
            "6....2.1..9.8..7..1.7.5.6..3..1.7...9.......6...4.5..1..4.3.9.7..6..9.2..1.6....5",
            ".935....4.1.3.....46....2.....7.3..5.3.8.61.....2.1..767....8...8.1......216....9",
            ".65.1....8....7...3...8..924.....8.1..31.89..7.1.....524..3...7...9....8....4.21.",
            ".3..8.........3..7..854.2...6.1.45..8.3...4.1..52.8.6...4.129..9..4.........9..1.",
            "4...2...5.7..5..1.2..7.6..47...4...1.2.....7...1...6..9..5.7..6.8.....3.5..314..9",
            ".......482.87...5..6...83....7...8.2...93...6..3...4.1.4...12..8.63...1........84",
            "794.....2.3.8.9.......4..6.4....7.8..7.9.612.6....1.9.....6..5..4.2.8...163.....8",
            "1.3..5.8...57...34.8.6.....9..8...7.....57..95..3...2..5.2.......81...954.1..9.6.",
            ".84.......2......57.9..8......67.1.29..8.56.....21.8.34.8..2....9......1.53......",
            "49.5..3.1.5..4..792....9.....14.3..6.7.....4.9..6.27.....1....774..9..3.1.2..7.94",
            "5...1...6....4....41.3.9.25..59.46.....1.8....3.....5..........2...9...4.83...79.",

            };
#endregion
        }
    }
